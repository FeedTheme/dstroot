name: 'Jekyll Deploy Action'

description: >
  A Github Action to deploy the Jekyll site conveniently for GitHub Pages

branding:
  icon: 'command'
  color: 'red'

inputs:
  hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  hub_password:
    description: Docker Hub authentication token
    required: true
  hub_token:
    description: Docker Hub authentication token
    required: true
  action_path:
    description: Path to the dockerfile from which to build the image
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: Tag to use for the new image
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  pauli_sum:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  workspace:
    description: 'The deploy repository'
    required: false
  failure_status:
    description: 'The deploy branch'
    required: false

outputs:
  all_outputs:
    description: Collect all outputs
    value: ${{ toJSON(steps.*.outputs) }}

runs:
  #using: 'node20'
  #main: '.github/run/main.js'
  #post: '.github/run/post.js'
  #post-if: 'success()'
  using: composite
  
  steps:
    - name: üíé Get the latest commit message
      id: commit
      shell: bash
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

        git config --global --add safe.directory "${{ github.workspace }}"
        #[[ "$RUNNER_OS" == "Windows" ]] && git config --global core.autocrlf true
        [[ "$RUNNER_OS" == "Windows" ]] && git config --global core.safecrlf false
       
        git config --global credential.helper store
        echo "https://${{ github.actor }}:${{ inputs.token }}@github.com" > ~/.git-credentials

        echo 'TARGET_REPO="https://${{ github.actor }}:${{ inputs.token }}@github.com/${TARGET_REPOSITORY}.git"' >> ${GITHUB_ENV}
        echo 'REMOTE_REPO="https://${{ github.actor }}:${{ inputs.token }}@github.com/${{ github.repository }}.git"' >> ${GITHUB_ENV}
 
        LATEST_COMMIT=$(curl -s "https://api.github.com/users/eq19/events/public" | jq ".[0].payload.commits[0].message")
        if [ $? -eq 0 ]; then
          if [[ -z "$LATEST_COMMIT" ]]; then
            echo 'LATEST_COMMIT="update by workspace"' >> ${GITHUB_ENV}
          elif [[ "$LATEST_COMMIT" == null ]]; then
            echo 'LATEST_COMMIT="update by workspace"' >> ${GITHUB_ENV}
          else
            echo 'LATEST_COMMIT='$LATEST_COMMIT >> ${GITHUB_ENV}
          fi
        else
          echo 'LATEST_COMMIT="update by workspace"' >> ${GITHUB_ENV}
        fi
  
    - name: ‚è™ Rewind all jobs on failure
      shell: bash
      run: |
        if [[ '${{ inputs.failure_status }}' == 'true' ]]; then
      
          git clone --single-branch --branch gh-pages ${{ env.REMOTE_REPO }} gh-pages && cd gh-pages
          git add . && git commit --allow-empty -m "rerun due to job failure" && git push
  
        else

          cd ${{ inputs.workspace }} && rm -rf .git .bundle vendor
          git clone --single-branch --branch gh-pages ${{ env.TARGET_REPO }} ${{ inputs.action_path }}/gh-pages

          cd ${{ inputs.action_path }}/gh-pages
          find -not -path "./.git/*" -not -name ".git" | grep git
          find -not -path "./.git/*" -not -name ".git" -delete
          
          shopt -s dotglob && mv -f ${{ inputs.workspace }}/* .
          #git fetch && git add . && git commit --allow-empty -m ${{ env.LATEST_COMMIT }} && git rebase && git push
          git add . && git commit --allow-empty -m ${{ env.LATEST_COMMIT }} git push
         
        fi
