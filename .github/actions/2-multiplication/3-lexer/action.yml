name: 'Docker Deploy Action'

description: >
  ðŸª‚  A Github Action to deploy pages conveniently

branding:
  icon: 'command'
  color: 'green'

inputs:
  id:
    description: The deploy id
    required: false
  hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  hub_password:
    description: Docker Hub authentication token
    required: true
  hub_token:
    description: Docker Hub authentication token
    required: true
  action_path:
    description: Path to the dockerfile from which to build the image
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: Tag to use for the new image
    default: ${{ github.action_repository }}
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  initiate_pauli_sum:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  repository:
    description: 'The deploy repository'
    default: ${{ github.repository }}
    required: false

outputs:
  describe:
    description: Collect describe outputs
    value: ${{ steps.describe.outputs.ip }}
  compute:
    description: Collect compute outputs
    value: ${{ steps.describe.outputs.function }}

runs:
  using: composite
  steps:
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12
        allow-prereleases: true

    - uses: actions/cache@v4
      if: runner.os == '-macOS'
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip -q install --upgrade pip setuptools six wheel
        python -m pip -q install -r ${{ inputs.action_path }}/requirements-dev.txt

    - uses: ikalnytskyi/action-setup-postgres@v6 
      env:
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: FALSE
      id: postgres
      with:
        username: yoda
        password: GrandMaster
        database: test
        port: 34837

    - name: ðŸª‚ Test postgres
      run: |
        cp ./.github/entrypoint/test.py .
        python3 -m pytest -vv test.py
      env:
        CONNECTION_URI: ${{ steps.postgres.outputs.connection-uri }}
        SERVICE_NAME: ${{ steps.postgres.outputs.service-name }}
        EXPECTED_CONNECTION_URI: postgresql://yoda:GrandMaster@localhost:34837/test
        EXPECTED_SERVICE_NAME: yoda
      shell: bash

    #Ref: https://gist.github.com/xtrmstep/92aab2d465e348ce1c07ed903ca0dfb8
    - id: describe
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        #Fill in metadata with ./.github/entrypoint/artifact/python/manual_v2.ipynb vs prime hexagon
        gcloud compute instances describe grid-${{ env.IMAGE_TAG }} --zone=us-central1-a

        ssh-keygen -t rsa -b 4096 -N '' -f $HOME/.ssh/id_rsa -C root && sed -i.backup "1s|^|runner: |" $HOME/.ssh/id_rsa.pub && gh secret set GCP_ID_RSA < $HOME/.ssh/id_rsa
        gcloud compute instances add-metadata grid-${{ env.IMAGE_TAG }} --zone=us-central1-a --metadata-from-file ssh-keys=$HOME/.ssh/id_rsa.pub > /dev/null

        echo $(gcloud compute instances describe grid-${{ env.IMAGE_TAG }} --zone=us-central1-a --format json) > instance
        echo 'ip='$(gcloud compute instances describe grid-${{ env.IMAGE_TAG }} --zone=us-central1-a --format='value(networkInterfaces.accessConfigs[0].natIP)') >> ${GITHUB_OUTPUT}
        echo 'function='$(curl -s -X POST https://us-central1-feedmapping.cloudfunctions.net/function -H "Authorization: Bearer $(gcloud auth print-identity-token)" -H "Content-Type: application/json" --data @instance | base64) >> ${GITHUB_OUTPUT}

    #Ref: https://blog.benoitblanchon.fr/github-action-run-ssh-commands/
    - name: Configure SSH
      if: runner.os == 'Windows'
      id: compute
      shell: bash
      env:
        IP: ${{ steps.describe.outputs.ip }}
      run: |
        #localedef -i en_US -f UTF-8 en_US.UTF-8
        ssh-keyscan -t rsa $IP >> $HOME/.ssh/known_hosts
        chmod 600 $HOME/.ssh/id_rsa
        cat << EOL >> $HOME/.ssh/config
        Host staging
          HostName $IP
          User runner
          IdentityFile $HOME/.ssh/id_rsa
          StrictHostKeyChecking no
        EOL
        #Ref: https://github.com/cloudkite-io/google-container-optimized-os-tools
        ssh staging 'sudo whoami && \
          sudo echo ${{ steps.setup_runner.outputs.function }} > /home/runner/.ssh/function.json && \
          sudo chown root:root /home/runner/.ssh/*.json && sudo mv -f /home/runner/.ssh/*.json /home/runner/.docker/'
        if [ $? -eq 0 ]; then
          ssh staging 'sudo ls -alR /home/runner'
        else
          exit 1
        fi
