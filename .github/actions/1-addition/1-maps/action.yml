name: 'Docker Deploy Action'

description: >
  ðŸª‚  A Github Action to deploy pages conveniently

branding:
  icon: 'command'
  color: 'red'

inputs:
  hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  hub_password:
    description: Docker Hub authentication token
    required: true
  hub_token:
    description: Docker Hub authentication token
    required: true
  action_path:
    description: Path to the dockerfile from which to build the image
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: Tag to use for the new image
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  initiate_pauli_sum:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  repository:
    description: 'The deploy repository'
    default: ${{ github.repository }}
    required: false
  id:
    description: The id according to os
    required: true

outputs:
  artifact:
    description: Collect artifact outputs
    value: ${{ toJSON(steps.artifact.outputs) }}
  variables:
    description: Collect variables outputs
    value: ${{ toJSON(steps.variables.outputs) }}

runs:
  using: composite
  steps:
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.hub_username }}
        password: ${{ inputs.hub_token }}
        
    - name: Remove Existing Connection
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        HEADER="Accept: application/vnd.github+json"
        /home/runner/work/_actions/eq19/eq19/v1/.github/entrypoint/init.sh

        #See: https://docs.github.com/en/rest/actions/self-hosted-runners
        TOTAL_COUNT=$(gh api -H "${HEADER}" /repos/${{ github.repository }}/actions/runners --jq '.total_count')
        RUNNER_ID=$(gh api -H "${HEADER}" /repos/${{ github.repository }}/actions/runners --jq '.runners.[].id')
        if (( $TOTAL_COUNT != 0 )); then gh api --method DELETE -H "${HEADER}" /repos/${{ github.repository }}/actions/runners/${RUNNER_ID}; fi 

    - name: View context attributes
      uses: actions/github-script@v7
      with:
        script: console.log(context)

    - name: ðŸš€ Initiate Lexer
      uses: devcontainers/ci@v0.3
      with:
        push: always
        runCmd: ls -alR /data
        skipContainerUserIdUpdate: true
        imageName: ${{ inputs.image_name }}
        imageTag: target-${{ github.run_number }}
        configFile: ${{ inputs.action_path }}/.devcontainer.json

    - name: ðŸ’Ž Variables
      id: variables
      shell: bash
      run: |
        BASE_NAME=$(basename ${{ inputs.image_name }})
        IFS=', '; array=($(curl -L -s 'https://registry.hub.docker.com/v2/repositories/${{ inputs.image_name }}/tags?page_size=1024' | jq -rc '."results"[]["name"]' | yq eval -P | sed "s/ /, /g"))
        for ((i=0; i < ${#array[@]}; i++)); do
          if [ "${array[$i]}" != "latest" ]; then
            HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ inputs.hub_username }}\", \"password\": \"${{ inputs.hub_password }}\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
            curl -s -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/namespaces/${{ inputs.hub_username }}/repositories/$BASE_NAME/tags/${array[$i]}
            echo "deleted: ${{ inputs.image_name }}:${array[$i]}"
          fi
        done
