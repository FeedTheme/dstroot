name: 'Jekyll Deploy Action'

description: >
  A Github Action to deploy the Jekyll site conveniently for GitHub Pages

branding:
  icon: 'command'
  color: 'red'

inputs:
  hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  hub_password:
    description: Docker Hub authentication token
    required: true
  hub_token:
    description: Docker Hub authentication token
    required: true
  action_path:
    description: Path to the dockerfile from which to build the image
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: Tag to use for the new image
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  gell_mann:
    description: Build args
    required: false
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  repository:
    description: 'The deploy repository'
    default: ${{ github.repository }}
    required: false

outputs:
  init:
    value: ${{ join(steps.init.outputs.*, '\n') }}
  variables:
    value: ${{ join(steps.variables.outputs.*, '\n') }}

runs:
  #using: 'node20'
  #main: '.github/run/main.js'
  #post: '.github/run/post.js'
  #post-if: 'success()'
  using: composite
  
  steps:
    - name: ðŸ’Ž Reinvented
      if: runner.os != 'macOS'
      shell: bash
      run: |
        if [ ! -d /mnt/disks/platform/usr/local/sbin ]; then
          #cd "${{ github.workspace }}" && git add . && git commit --allow-empty -m ${{ env.LATEST_COMMIT }} && git push
          exit 1
        fi

    #Fill in metadata with ${{ steps.artifact.outputs.orgs_json }}
    - name: Run identity
      shell: bash
      run: |
        TOKEN=$(/mnt/disks/platform/usr/bin/gcloud auth print-identity-token)
        curl -s -X POST https://us-central1-feedmapping.cloudfunctions.net/function \
          -H "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" \
          --data @${{ github.workspace }}/docs/data.json | jq '.'

    - name: ðŸ’Ž Connect to Redis
      if: runner.os != 'macOS'
      # Runs a script that creates a Redis client, populates
      # the client with data, and retrieves data
      env:
        # The hostname used to communicate with the Redis service container
        # Ref: https://stackoverflow.com/a/48547074/4058484
        REDIS_PORT: 6379
        REDIS_HOST: 172.17.0.1
      shell: bash
      run: |
        node ${{ inputs.action_path}}/main.js
    
    - name: ðŸ’Ž Connect to postgres
      if: runner.os != 'macOS'
      env:
        # use the internal host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        POSTGRES_PORT: 5432
        POSTGRES_HOST: 172.17.0.1
      shell: bash
      run: |
        node ${{ inputs.action_path}}/post.js
        echo '${{ inputs.gell_mann }}'
